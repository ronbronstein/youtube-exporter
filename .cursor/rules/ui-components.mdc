---
description: When making UI and design changes, we must refer to this doc
globs: 
alwaysApply: false
---
# YouTube Research Hub - UI Components

## 🚨 CRITICAL CSS NAMING RULES

### ❌ NEVER Use These Patterns:
- `analytics-*` classes (use `analysis-*` instead)
- CamelCase in CSS (use kebab-case)
- Generic names like `.content`, `.wrapper`, `.box`

### ✅ ALWAYS Use These Patterns:
- `analysis-*` for all analytics/analysis components
- `xp-*` for all Windows XP UI elements
- Component prefixes: `.app-*`, `.results-*`, `.form-*`, `.tag-*`

## 📊 Current CSS Class Architecture

### Component-Based Classes (Primary Pattern)
```css
.app-*           /* Application-level components */
.results-*       /* Results display components */
.video-*         /* Video-related components */
.tag-*           /* Tag input components */
.analysis-*      /* Analytics components (NOT analytics-*) */
.cached-*        /* Cache-related components */
.loading-*       /* Loading/spinner components */
.message-*       /* Message/notification components */
```

### Analytics Components (CRITICAL)
```css
/* ✅ CORRECT - These exist in CSS */
.analysis-section       /* Main analytics container */
.analysis-panel        /* Individual analytics panels */
.analysis-grid         /* Grid layout for stats */
.analysis-stat         /* Individual statistic displays */
.chart-panel          /* Chart containers */
.chart-container      /* Chart canvas wrappers */

/* ❌ WRONG - These don't exist */
.analytics-grid       /* Use analysis-grid */
.analytics-card       /* Use analysis-panel */
.analytics-stat       /* Use analysis-stat */
```

### JavaScript Integration Rules
```javascript
// ✅ Correct Usage
element.className = 'analysis-panel';
document.querySelector('.xp-button');
element.classList.add('active', 'has-data');

// ❌ Incorrect Usage
element.className = 'analytics-grid'; // Should be 'analysis-grid'
element.className = 'customButton';   // Should be 'xp-button'
```

## 🎨 Windows XP Modern Design System

### CSS Variables (Current Implementation)
```css
:root {
  /* Core XP Colors */
  --xp-window-bg: #ece9d8;
  --xp-button-face: #ece9d8;
  --xp-text: #1a1a1a;
  --xp-selection-bg: #2c5aa0;
  --xp-border-dark: #707070;
  
  /* Typography */
  --xp-font-family: 'Tahoma', 'Segoe UI', 'MS Sans Serif', sans-serif;
  --xp-font-size: 14px;
  
  /* Spacing & Effects */
  --xp-spacing-sm: 8px;
  --xp-border-radius: 3px;
  --xp-transition-normal: 0.25s cubic-bezier(0.4, 0, 0.2, 1);
}
```

### Typography (Updated)
- **Primary Font**: Tahoma (with modern fallbacks)
- **Base Size**: 14px (increased for better readability)
- **Small**: 12px, **Large**: 16px, **Heading**: 20px
- **Line Height**: 1.4 for improved readability

## 🔘 Button Components

### XP Button System (Current)
```css
.xp-button {
  background: linear-gradient(135deg, var(--xp-button-face) 0%, var(--xp-window-bg-dark) 100%);
  border: 1px outset var(--xp-button-face);
  border-radius: var(--xp-border-radius);
  transition: all var(--xp-transition-normal);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.xp-button:hover {
  transform: translateY(-1px) scale(1.02);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.xp-button:active {
  border: 1px inset var(--xp-button-face);
  transform: translateY(0) scale(1.01);
}
```

### Button Variants
```css
.xp-button.success    /* Green buttons */
.xp-button.warning    /* Orange buttons */
.xp-button.demo       /* Demo mode buttons */
.xp-button.large      /* Large input buttons */
```

## 📝 Form Components (Current Implementation)

### Input System
```css
.xp-input {
  border: 1px inset var(--xp-window-bg);
  background: var(--xp-input-bg);
  border-radius: var(--xp-border-radius);
  box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
  transition: all var(--xp-transition-normal);
}

.xp-input.large       /* Large form inputs */
.xp-input.full-width  /* Full-width inputs */
```

### Form Layout Classes
```css
.form-section         /* Form containers */
.form-row            /* Form row layouts */
.form-group          /* Form field groups */
.api-section         /* API key sections */
.demo-button-container /* Demo mode buttons */
```

## 📊 Results & Analytics Components

### Results Structure
```css
.results-section       /* Main results area */
.results-component     /* Results display */
.results-header        /* Results header area */
.results-controls      /* Control panels */
.results-count         /* Results counter */
.video-display-container /* Video list area */
```

### State Classes
```css
.active          /* Active state (tabs, buttons) */
.disabled        /* Disabled state */
.focused         /* Focus state */
.hidden          /* Hidden elements */
.has-data        /* Sections with data */
.collapsed       /* Collapsed sections */
.validated       /* Validated inputs */
```

## 🏷️ Tag Input Components

### Tag System Classes
```css
.tag-input-container     /* Main tag container */
.tag-input-container.focused /* Focused state */
.tag-input-container.disabled /* Disabled state */
.tag                    /* Individual tags */
.tag-text              /* Tag text content */
.tag-remove            /* Tag remove buttons */
.tag-input             /* Tag input field */
```

## 📋 Cache Components

### Cache Management
```css
.cached-channels-section  /* Cache section container */
.cached-channels-list    /* Cache list display */
.cached-channels-grid    /* Cache grid layout */
.cached-channel-item     /* Individual cache items */
.cache-toggle-btn       /* Cache toggle button */
```

## 🔄 Loading Components

### Loading System
```css
.loading-component      /* Loading wrapper */
.loading-overlay       /* Overlay loading */
.loading-content       /* Loading content area */
.loading-animation     /* Animation container */
.loading-text          /* Loading message text */
.circle-spinner        /* Spinner animation */
```

## 🎯 CSS-JS Consistency Rules

### Pre-Commit Checklist
- [ ] All class names follow kebab-case convention
- [ ] Analytics components use `analysis-*` not `analytics-*`
- [ ] UI elements use appropriate `xp-*` classes
- [ ] JavaScript and CSS class names match exactly
- [ ] State classes are consistent across components
- [ ] No duplicate or conflicting class definitions

### Testing Classes Exist
```javascript
// Verify critical classes exist
const criticalClasses = [
    'analysis-panel', 'analysis-grid', 'analysis-stat',
    'xp-button', 'xp-input', 'form-section',
    'results-component', 'tag-input-container'
];

criticalClasses.forEach(className => {
    const exists = document.styleSheets[0].cssRules ? 
        Array.from(document.styleSheets[0].cssRules)
            .some(rule => rule.selectorText?.includes(className)) : false;
    console.log(`${className}: ${exists ? '✅' : '❌'}`);
});
```
