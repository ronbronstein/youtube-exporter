---
description:
globs:
alwaysApply: false
---
# Feature Development Guide

## 🔧 Adding New Analytics Features

### YouTube Data Integration
When adding new YouTube API functionality:
1. **Check quota costs** - Reference [docs/API_REFERENCE.md](mdc:docs/API_REFERENCE.md)
2. **Add to batch processing** - Maintain 50-item chunks
3. **Update progress tracking** - Show users what's happening
4. **Handle edge cases** - Private videos, deleted content, etc.

### Analytics Function Pattern
```javascript
function calculateNewMetric(videoData) {
    // Input validation
    if (!videoData || !Array.isArray(videoData)) {
        console.warn('Invalid input for calculateNewMetric');
        return null;
    }
    
    // Core calculation logic
    const result = videoData.map(video => {
        // Handle missing data gracefully
        const metric = video.someProperty || 0;
        return processMetric(metric);
    });
    
    // Return consistent format
    return {
        values: result,
        summary: generateSummary(result),
        timestamp: new Date().toISOString()
    };
}
```

## 🎨 Adding UI Components

### Windows XP Component Development
Follow the authentic XP design patterns in [youtube_video_exporter.html](mdc:youtube_video_exporter.html):

```css
.new-xp-component {
    background: var(--xp-button-face);
    border: 2px outset var(--xp-button-face);
    font-family: Tahoma, sans-serif;
    padding: 4px 8px;
}

.new-xp-component:active {
    border: 2px inset var(--xp-button-face);
}
```

### UI State Management
- Use `dataset` attributes for component state
- Store UI preferences in localStorage
- Maintain Windows XP authentic behavior patterns

## 📊 Export Format Extensions

### Adding New Export Types
When adding export functionality to [youtube_video_exporter.html](mdc:youtube_video_exporter.html):

1. **Create export function** following naming pattern:
   ```javascript
   function exportDataAs[Format](videoData, channelInfo) {
       // Format-specific processing
       return formattedData;
   }
   ```

2. **Add download trigger**:
   ```javascript
   function triggerDownload(data, filename, mimeType) {
       const blob = new Blob([data], { type: mimeType });
       const url = URL.createObjectURL(blob);
       // Download logic
   }
   ```

3. **Update UI** with new export button following XP styling

### Current Export Formats
- **CSV**: Spreadsheet analysis
- **TXT**: Title-only lists  
- **Markdown**: LLM-ready format

## 🔍 Search & Filter Enhancements

### Adding New Filter Types
Extend the filtering system in [youtube_video_exporter.html](mdc:youtube_video_exporter.html):

```javascript
const filterTypes = {
    title: (video, query) => video.title.toLowerCase().includes(query),
    description: (video, query) => video.description.toLowerCase().includes(query),
    // Add new filter type here
    newFilter: (video, query) => customFilterLogic(video, query)
};
```

## 📈 Performance Optimization Guidelines

### YouTube API Efficiency
- **Combine API calls** when possible
- **Cache results** in localStorage with expiration
- **Implement pagination** for large datasets
- **Use abort controllers** for cancellable requests

### Frontend Performance
- **Lazy render** large video lists
- **Debounce** search inputs
- **Optimize DOM updates** with document fragments
- **Minimize reflows** during data updates

## 🧪 Testing New Features

### Manual Testing Checklist
- [ ] Test with small channels (< 50 videos)
- [ ] Test with large channels (1000+ videos)  
- [ ] Test with private/unlisted videos
- [ ] Test API quota exhaustion scenarios
- [ ] Verify Windows XP visual consistency
- [ ] Check mobile responsiveness

### Common Edge Cases
- Empty channels
- Channels with only Shorts
- Channels with mixed content types
- API rate limiting
- Network interruptions
- Invalid channel IDs/URLs

## 📝 Documentation Requirements

### When Adding Features
1. **Update [README.md](mdc:README.md)** with feature description
2. **Document in [docs/USER_GUIDE.md](mdc:docs/USER_GUIDE.md)** if user-facing
3. **Add to [docs/TaskBoard.md](mdc:docs/TaskBoard.md)** for tracking
4. **Update [CHANGELOG.md](mdc:CHANGELOG.md)** with version notes

### Code Documentation
- Comment complex algorithms
- Document API endpoints used
- Explain Windows XP design decisions
- Note performance considerations
