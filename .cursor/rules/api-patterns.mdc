---
description: when working on Youtube API related topics.
globs: 
alwaysApply: false
---
---
description: YouTube API integration patterns
globs: ["**/*Api.js", "**/*Service.js"]
alwaysApply: false
---

# YouTube API Patterns

## TOC
- [Service Architecture](mdc:#service-architecture)
- [API Key Management](mdc:#api-key-management) 
- [Core Endpoints](mdc:#core-endpoints)
- [Demo/Live Modes](mdc:#demolive-modes)
- [Error & Quota](mdc:#error--quota)

## Service Architecture
```javascript
// Use service class pattern
export class YouTubeApiService {
  constructor(apiKey) { this.apiKey = apiKey; }
  setDemoMode(enabled) { this.isDemoMode = enabled; }
  async getChannelData(query) { /* channel lookup */ }
  async getAllChannelVideos(playlistId, progressCallback) { /* batch fetch */ }
}
```

## API Key Management
```javascript
// Auto-load priority: VITE_DEMO_API_KEY → VITE_YOUTUBE_API_KEY → user input
const apiKey = import.meta.env.VITE_DEMO_API_KEY || localStorage.getItem('youtubeApiKey');

// Validation: Must start with 'AIza', 35+ chars
const isValid = apiKey?.startsWith('AIza') && apiKey.length >= 35;
```

## Core Endpoints
| Endpoint | Part | Cost | Usage |
|----------|------|------|-------|
| `/channels` | `snippet,statistics` | 1 | Channel info |
| `/playlistItems` | `snippet` | 1 | Video list (batch 50) |
| `/videos` | `snippet,statistics` | 1 | Video details (batch 50) |

## Demo/Live Modes
```javascript
// Demo: 100 videos max, 2 pages limit
if (this.isDemoMode) {
  maxResults = 50; maxPages = 2; videoLimit = 100;
}

// Progress callbacks for long operations
progressCallback(`Fetching videos... ${current}/${total}`);
```

## Error & Quota
- **Daily limit**: 10,000 units
- **Quota exceeded**: Switch to cached data
- **Invalid key**: Clear localStorage, prompt re-entry
- **Rate limiting**: DemoRateLimiter class for abuse prevention

## Implementation Files
- [youtubeApi.js](mdc:src/js/services/youtubeApi.js) - Service class
- [App.js](mdc:src/js/components/App.js) - API key initialization
- [storage.js](mdc:src/js/services/storage.js) - Key persistence
